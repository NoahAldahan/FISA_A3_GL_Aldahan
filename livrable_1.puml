@startuml
/' Model '/
class SaveTaskFactory <<factory>> {
    +createSaveTask(type: String): SaveTask
}

abstract class SaveTask {
    +CurrentDirectoryPair : DirectoryPair
    +save()
    +getInfo(): String
}

class SaveTaskDiff {
    +SaveDifferentialRecursive(string sourcePath, string targetPath)
}

class SaveTaskComplete {
    +SaveComplete(string sourcePath, string targetPath)
}

class DirectoryPair {
    +sourcePath: String
    +targetPath: String
    +listFiles(): List<String>
}

class SaveTaskManager{
    +saveTasks: List<SaveTask>
    +executeSaveTasks(List<String> taskStrings)
}

class Log {
    +message: String
    +writeLog(message: String)
}

class JsonManager {
    +readJson(file: String): Object
    +writeJson(file: String, data: Object)
}

/' ViewModel '/
class LogVM {
    +logData: String
    +addLog(message: String)
    +getLogs(): List<String>
}

class SaveTaskVM {
    +currentSaveTask: SaveTask
    +executeSave(type: String)
}

class DirectoryPairVM {
    +DirectoryPairPath: String
    +loadDirectoryPair(path: String): Direc::::::tory
}

/' View '/
class Cli {
    +displayMenu()
    +getInput(): String
    +printOutput(message: String)
}

/' Relations '/
SaveTaskFactory --> SaveTask : "create"
SaveTask <|--- SaveTaskDiff : "inherited"
SaveTask <|--- SaveTaskComplete : "inherited"

Log <-- SaveTask : "use"
JsonManager <-- Log : "use"

SaveTaskVM --> SaveTaskManager : "manage"
SaveTaskManager --> SaveTaskFactory : "manage"
SaveTaskVM --> LogVM : "notify"
DirectoryPairVM --> DirectoryPair : "manage"

LogVM --> Log : "manages"

Cli --> SaveTaskVM : "interacts"
Cli --> LogVM : "interacts"
Cli --> DirectoryPairVM : "interacts"
@enduml
