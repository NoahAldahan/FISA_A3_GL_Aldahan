@startuml
<<<<<<< HEAD
/' Model '/
class SaveTaskFactory <<factory>> {
    +createSaveTask(ESaveTaskTypes saveTaskTypes, string sourcePath, string targetPath): SaveTask
}

abstract class SaveTask {
    +CurrentDirectoryPair : DirectoryPair
    +save()
    +getInfo(): String
}

class SaveTaskDiff {
    +SaveDifferentialRecursive(string sourcePath, string targetPath)
}

class SaveTaskComplete {
    +SaveComplete(string sourcePath, string targetPath)
}

class DirectoryPair {
    +sourcePath: String
    +targetPath: String
    +listFiles(): List<String>
}

class SaveTaskManager{
    +saveTasks: List<SaveTask>
    +MaxSaveTasks: static int 
    +executeSaveTask(int index)
    +executeAllSaveTasks()
    +addSaveTasks(ESaveTaskTypes type, string SourcePath, string TargetPath)
    +removeSaveTask(int index)
    +getSaveTasks(): List<SaveTask>
    +SerializeSaveTasks()
    +DeserializeSaveTasks()
}

class Log {
    +message: String
    +writeLog(message: String)
}

class JsonManager {
    +readJson(file: String): Object
    +writeJson(file: String, data: Object)
}

/' ViewModel '/
class LogVM {
    +logData: String
    +addLog(message: String)
    +getLogs(): List<String>
}

class SaveTaskVM {
    +currentSaveTask: SaveTask
    +executeSave(type: String)
}

class DirectoryPairVM {
    +DirectoryPairPath: String
    +loadDirectoryPair(path: String): Direc::::::tory
}

/' View '/
class Cli {
    +displayMenu()
    +getInput(): String
    +printOutput(message: String)
}

/' Relations '/
SaveTaskFactory --> SaveTask : "create"
SaveTask <|--- SaveTaskDiff : "inherited"
SaveTask <|--- SaveTaskComplete : "inherited"

Log <-- SaveTask : "use"
JsonManager <-- Log : "use"

SaveTaskVM --> SaveTaskManager : "manage"
SaveTaskManager --> SaveTaskFactory : "manage"
SaveTaskVM --> LogVM : "notify"
DirectoryPairVM --> DirectoryPair : "manage"

LogVM --> Log : "manages"

Cli --> SaveTaskVM : "interacts"
Cli --> LogVM : "interacts"
Cli --> DirectoryPairVM : "interacts"
=======
/' Packages '/
package "Model" {
    class SaveWorkFactory <<factory>> {
        +createSaveWork(type: String): SaveWork
    }

    abstract class SaveWork {
        +save()
    }

    class SaveWorkDiff {
        +calculateDiff()
    }

    class SaveWorkComplete {
        +saveAll()
    }

    class DirectoryPair {
        +path: String
        +listFiles(): List<String>
    }

    class SaveWorkManager {}

    class Log {
        +message: String
        +writeLog(message: String)
    }

    class JsonManager {
        +readJson(file: String): Object
        +writeJson(file: String, data: Object)
    }

    SaveWorkFactory *--> SaveWork : "create"
    SaveWork *--> DirectoryPair : "create"
    SaveWork <|--- SaveWorkDiff : "inherited"
    SaveWork <|--- SaveWorkComplete : "inherited"

    Log <-- SaveWork : "use"
    JsonManager <-- Log : "use"
}

package "Controller" {
    class LogController {
        +logData: String
        +addLog(message: String)
        +getLogs(): List<String>
    }

    class SaveWorkController {
        +currentSaveWork: SaveWork
        +executeSave(type: String)
    }

    SaveWorkController *--> SaveWorkManager : "manage"
    SaveWorkManager *--> SaveWorkFactory : "manage"
    SaveWorkController --> LogController : "notify"
    Log <-- LogController : "manages"
} 

package "View" {
    class Cli {
        +displayMenu()
        +getInput(): String
        +printOutput(message: String)
    }

    Cli *--> SaveWorkController : "interacts"
    Cli *--> LogController : "interacts"
}
>>>>>>> Features-Translation
@enduml

