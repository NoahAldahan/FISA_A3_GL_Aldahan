@startuml

/' ==================== Packages ==================== '/
package "Model" {
    class SaveTaskFactory {
        ~ CreateSave(saveTaskTypes: ESaveTaskTypes, sourcePath: string, targetPath: string): SaveTask
    }

    abstract class SaveTask <<abstract>> {
        ~ DirectoryPair CurrentDirectoryPair
        ~ SaveTask(DirectoryPair CurrentDirectoryPair)
        ~ DirectoryPair GetDirectoryPair()
        ~ abstract void Save()
        ~ abstract List<string> GetInfo()
        ~ void SetLogRealTime(LogRealTime logRealTime)
        ~ void SetLogDaily(LogDaily logDaily)
    }

    class SaveTaskDifferential {
        ~internal SaveTaskDifferential(DirectoryPair CurrentDirectoryPair)
        ~internal void Save()
        ~internal List<string> GetInfo()
        -private void SaveDifferentialRecursive(string SourcePath, string TargetPath)
    }

    class SaveTaskComplete {
        ~ SaveTaskComplete(DirectoryPair CurrentDirectoryPair)
        ~ override void Save()
        - void CopyFilesRecursivelyForTwoFolders(DirectoryInfo sourceDirectoryInfo, DirectoryInfo targetDirectoryInfo)
        ~ override List<string> GetInfo()
    }

    class DirectoryPair {
        ~ SourcePath: string
        ~ TargetPath: string
        ~ DirectoryPair(SourcePath: string, TargetPath: string)
    }

    enum ESaveTaskTypes <<enum>> {
        Differential
        Complete
    }

    class SaveTaskManager {
        - static MaxSaveTasks: int = 5
        ~ SaveTasks: List<SaveTask>
        ~ SaveTaskFactory: SaveTaskFactory
        ~ GetSaveTasksClone(): List<SaveTask>
        ~ SaveTaskManager()
        ~ AddSaveTask(SaveTaskType: ESaveTaskTypes, sourcePath: string, targetPath: string): void
        ~ RemoveSaveTask(index: int): void
        ~ RemoveSaveTask(SaveTaskType: ESaveTaskTypes, sourcePath: string, targetPath: string): void
        ~ ExecuteSaveTask(index: int): void
        ~ ExecuteAllSaveTasks(): void
        ~ SerializeSaveTasks(): void
    }

    enum ELanguage <<enum>> {
        EN (English)
        FR (Français)
        ES (Español)
        DE (Deutsch)
        IT (Italiano)
        PT (Português)
        NL (Nederlands)
        RU (Русский)
        JA (日本語)
        ZH (中文)
    
    }

    class LanguageExtensions {
        ~ static Dictionary<ELanguage, string> LanguageStrings
        ~ static string GetValue(ELanguage language)
        ~ static ELanguage GetLanguageInstance(string language)
        ~ static List<string> GetAllStrLanguage()
        ~ static ELanguage ToLanguage(string strLanguage)
    }

    class LanguageManager {
        ~ ELanguage defaultLanguage
        - JsonManager jsonManager
        ~ LanguageManager()
        ~ EMessage InitDefaultLanguage()
        ~ static bool IsValideLanguage(string language)
        ~ EMessage SetDefaultLanguage(string languageValue)
        ~ ELanguage GetLanguageInstance(string language)
    }

    enum EMessage <<enum>> {
        ErrorTranslate
        InitMessage
        LanguagesMessage
        StopMessage
        StartSaveTaskMessage
        LanguageChangeSuccessMessage
        CreateSaveTaskMessage
        DefaultLanguageInitSuccessMessage
        DefaultLanguageInitErrorMessage
        DefaultLanguageChangedSuccessMessage
        DefaultLanguageChangedErrorMessage
        AskLanguageMessage
        ErrorUserEntryStrMessage
        ErrorUserEntryOptionMessage
        SaveTaskMenuMessage
    }

    class MessageExtensions {
        ~ static Dictionary<EMessage, string> MessageStrings
        ~ static string GetValue(EMessage message)
    }

    class MessageManager {
        ~ LanguageManager languageManager
        ~ JsonManager jsonManager
        + MessageManager(LanguageManager languageManager, JsonManager jsonManager)
        + string GetMessageTranslate(EMessage message)
    }



    class JsonManager {
    - string TranslationPath
    - string AppSettingsPath
    - string SerializationPath
    + string LogPathDaily
    + string LogPathRealTime
    + GetMessage(msg: string, language: ELanguage): string
    + GetSettings(settings: string): string
    + SetDefaultLanguage(languageValue: string, languageKey: string): EMessage
    + SerializeSaveTasks(SaveTasks: List<SaveTask>): void
    + DeserializeSaveTasks(): List<SaveTask>
    }

    class Utilities {
    + IsValidPath(path: string): bool
    }


    /' Relations '/
    SaveTaskFactory --> SaveTask : "<<creates>>"
    SaveTask *--> DirectoryPair : "<<instanciates>>"
    SaveTask <|--- SaveTaskDifferential : "<<inherits>>"
    SaveTask <|--- SaveTaskComplete : "<<inherits>>"
    ELanguage <-- LanguageExtensions : "<<uses>>"
    EMessage <-- MessageExtensions : "<<uses>>"
    ESaveTaskTypes <-- SaveTaskFactory : "<<uses>>"
    LanguageManager --> LanguageExtensions : "<<uses>>"
    MessageManager --> MessageExtensions : "<<uses>>"
    SaveTaskManager o--> SaveTask : "<<contains>>"
    SaveTaskFactory --> DirectoryPair : "<<creates>>"
    MessageManager o--> LanguageManager : "<<contains>>"
}

package "Controller" {
    class CliController {
        ~ ECliAction action
        ~ SaveTaskController saveTaskController
        ~ CliController(MessageManager messageManager, CliView view, SaveTaskController saveTaskController, LanguageController languageController)
        ~ void HandleUserInput()
        ~ void StartCli()
    }

    class LogController {
        +logData: String
        +addLog(message: String)
        +getLogs(): List<String>
    }

    class SaveTaskController {
        ~ ECliSaveTaskAction action
        ~ SaveTaskManager saveTaskManager
        ~ SaveTaskController(MessageManager messageManager, SaveTaskView view, SaveTaskManager saveTaskManager)
        ~ void HandleUserInput()
        ~ void StartCli()
    }

    abstract class BaseController <<abstract>> {
        # MessageManager messageManager
        # BaseView view
        # BaseController(MessageManager messageManager, BaseView view)
        # void ShowMessage(Message msg)
        # string ShowQuestion(Message msg)
    }

    class LanguageController {
        ~ LangagesManager langaguesManager
        ~ LanguageController(LangagesManager langaguesManager)
        ~ Message SetDefaultLangage(string strLangage)
    }

    enum ECliAction <<enum>> {
        Stop = 0
        Init = 1
        ChangeDefaultLanguage = 2
        Languages = 3
        SaveMenu = 4
    }

    enum ECliSaveTaskAction <<enum>> {
        Init = 0
        StartTasks = 1
        CreateTask = 2
        ModifyTask = 3
        DeleteTask = 4
        Help = 5
        Quit = 6
    }

    /' Relations '/
    SaveTaskController o--> SaveTaskManager : "<<contains>>"
    SaveTaskManager *--> SaveTaskFactory : "<<instanciates>>"
    Log <-- LogController : "<<uses>>"
    CliController o--> LogController : "<<contains>>"
    CliController o--> SaveTaskController : "<<contains>>"
    CliController --> ECliAction : "<<uses>>"
    SaveTaskController --> ECliSaveTaskAction : "<<uses>>"
    SaveTaskController ---|> BaseController : "<<inherits>>"
    LogController ---|> BaseController : "<<inherits>>"
    CliController ---|> BaseController : "<<inherits>>"
    LanguageController ---|> BaseController : "<<inherits>>"
    BaseController o--> MessageManager : "<<contains>>"
    CliController o--> LanguageController : "<<contains>>"
    LanguageController o--> LanguageManager : "<<contains>>"
    LanguageManager o--> JsonManager : "<<contains>>"
    SaveTaskController --> Utilities : "<<uses>>"
}

package "View" {
    class CliView {}

    abstract class BaseView <<abstract>> {
        + void ShowMessage(string message)
        + string GetUserInput(string input)
        + int GetOptionUserInput()
        + string GetUserInput()
        + string ShowQuestion(string question)
    }

    class SaveTaskView {}
    class LanguageView {}
    class LogView {}

    /' Relations '/
    CliController o--u--> CliView : "<<contains>>"
    SaveTaskController o---> SaveTaskView : "<<contains>>"
    LanguageController o---> LanguageView : "<<contains>>"
    CliView --|> BaseView : "<<inherits>>"
    SaveTaskView --|> BaseView : "<<inherits>>"
    LanguageView --|> BaseView : "<<inherits>>"
    LogView --|> BaseView : "<<inherits>>"
    BaseController o--> BaseView : "<<contains>>"
    LogController o--> LogView : "<<contains>>"
}

package "LogDll" {
    class LogDaily {
        + dailyInfo: DailyInfo
        + stopWatch: Stopwatch
        + LogDaily(LogDailyPath: string, LogRealTimePath: string)
        + CreateDailyFile(): void
        + AddDailyInfo(SourcePath: string, TargetPath: string): void
    }


    class JsonLogManager {
        + UpdateRealTimeProgression(realTimeInfo: RealTimeInfo, LogRealTimePath: string): void
        + GetFileDailyName(Date: DateTime, LogDailyPath: string): string
        + CreateDailyJsonFile(Date: DateTime, LogDailyPath: string): void
        + AddSaveToDailyFile(DailyInfo: DailyInfo, LogDailyPath: string): void
        + AddSaveToRealTimeFile(realTimeInfo: RealTimeInfo, LogRealTimePath: string): void
        + AddJsonLogObject(FilePath: string, LogObject: object): void
        + GetLastSaveDate(LogDailyPath: string, FilePath: string): DateTime
    }

    enum ERealTimeState <<enum>> {
        ACTIVE
        END
        ERROR
    }

    class ERealTimeStateExstensions {
        - static Dictionary<ERealTimeState, string> MessageStrings
        + static string GetValue(ERealTimeState message)
    }

    struct RealTimeInfo {
    + string Name
    + string SourcePath
    + string TargetPath
    + string State
    + int TotalFilesToCopy
    + long TotalFilesSize
    + int NbFilesLeftToDo
    + double Progression
    + DateTime SaveDate
    + RealTimeInfo(string name, string sourceFilePath, string targetFilePath, string state, int totalFilesToCopy, long totalFilesSize, int nbFilesLeftToDo, int progression, DateTime saveDate)
    + string ToString()
}

    struct DailyInfo {
    - Name: string
    - FileSource: string
    - FileTarget: string
    - FileSize: long
    - FileTransferTime: double
    - DateTime: DateTime
    + ToString(): string
    + DailyInfo(name: string, fileSource: string, fileTarget: string, fileSize: long, fileTransferTime: double, time: DateTime)
    }

    class LogRealTime {
    + realTimeInfo: RealTimeInfo
    + LogRealTime(LogDailyPath: string, LogRealTimePath: string)
    + CreateRealTimeInfo(SourcePath: string, TargetPath: string, state: ERealTimeState)
    + GetTotalFilesInfosToCopy(path: string): Tuple<int, int>
    + UpdateRealTimeProgress(): void
    }

    abstract class Log <<abstract>> {
        # LogRealTimePath: string
        # LogDailyPath: string
        # Log(LogDailyPath: string, LogRealTimePath: string)
    }

    LogDaily  --> JsonLogManager : "<<uses>>"
    LogRealTime --> JsonLogManager : "<<uses>>"
    LogDaily ..|> Log : "<<implements>>"
    LogRealTime ..|> Log : "<<implements>>"
    LogRealTime --> ERealTimeState : "<<uses>>"
    ERealTimeStateExstensions --> ERealTimeState : "<<uses>>"
    LogRealTime --> ERealTimeStateExstensions : "<<uses>>"
    JsonLogManager --> RealTimeInfo : "<<uses>>"
    LogRealTime --> RealTimeInfo : "<<uses>>"
    JsonLogManager --> DailyInfo : "<<uses>>"
    LogDaily --> DailyInfo : "<<uses>>"
    SaveTaskDifferential --> JsonLogManager : "<<uses>>"
    SaveTaskFactory --> LogDaily : "<<instanciates>>"
    SaveTaskFactory --> LogRealTime : "<<instanciates>>"
    LogDaily <--o SaveTask : "<<contains>>"
    LogRealTime <--o SaveTask : "<<contains>>"

}

@enduml


